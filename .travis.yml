os: linux
dist: bionic
language: cpp

git:
  depth: false

env:
  global:
  - SNAPCRAFT_ENABLE_ERROR_REPORTING=0
  # regexes for release branch and tag
  - MULTIPASS_RELEASE_BRANCH_PATTERN="^release/([0-9\.]+)$"
  - MULTIPASS_RELEASE_TAG_PATTERN="^v([0-9]+\.[0-9]+)\.[0-9]+$"
  # build label added to the version string
  - MULTIPASS_BUILD_LABEL=""
  # whether to publish the built packages
  - MULTIPASS_PUBLISH=""
  # which channel to publish to
  - MULTIPASS_SNAP_CHANNEL=""
  # options to pass to the build reporter
  - MULTIPASS_REPORT_OPTIONS=()

if: | # bors and release branches, release tags and all pull requests
  branch IN (staging, trying, master)
  OR branch ~= env(MULTIPASS_RELEASE_BRANCH_PATTERN)
  OR branch ~= env(MULTIPASS_RELEASE_TAG_PATTERN)
  OR type = pull_request

addons:
  snaps:
  - &lxd lxd
  - &snapcraft
    name: snapcraft
    classic: true

before_install:
# determine build properties and targets
- source tools/setup_build.sh

# extract credentials
- |
  if [ "${TRAVIS_SECURE_ENV_VARS}" == "true" ]; then
    openssl aes-256-cbc -K $encrypted_1b80fb3c7803_key -iv $encrypted_1b80fb3c7803_iv \
      -in tools/bot-data.tar.xz.enc -out tools/bot-data.tar.xz -d
    tar --extract --xz --file tools/bot-data.tar.xz --directory ${HOME}
  fi

# install tooling requiements
- pyenv local 3.8.1
- python3 -m pip install --requirement tools/requirements.txt

install:
- sudo apt remove --purge --assume-yes lxd lxd-client
- sudo /snap/bin/lxd waitready
- sudo /snap/bin/lxd init --auto
- sudo adduser $USER lxd
- ccache --max-size=5G

after_failure:
- cat /tmp/*/trace.txt

after_script:
- ccache --show-stats

cache: ccache

jobs:
  include:
    - addons:
        snaps:
        - *lxd
        - *snapcraft
        - review-tools
      env: BUILD_TYPE=RelWithDebInfo
      before_script: &before_snapcraft
      # patch build system for the build type being processed
      - "[ ! -f tests/travis.patch ] || patch -p1 --no-backup-if-mismatch < tests/travis.patch"
      - "[ ! -f tests/travis-${BUILD_TYPE}.patch ] || patch -p1 --no-backup-if-mismatch < tests/travis-${BUILD_TYPE}.patch"

      # set up ccache
      - sg lxd -c '/snap/bin/lxc profile set default environment.PATH "/usr/lib/ccache:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"'
      - sg lxd -c '/snap/bin/lxc profile device add default ccache disk source=${HOME}/.ccache/ path=/root/.ccache'
      - ccache --zero-stats

      # inject build identifier
      - sed -i "/configflags:/a \    - -DMULTIPASS_BUILD_LABEL=${MULTIPASS_BUILD_LABEL}" snap/snapcraft.yaml

      script:
      - sg lxd -c '/snap/bin/snapcraft --use-lxd'
      - SNAP_ENFORCE_RESQUASHFS=0 /snap/bin/review-tools.snap-review --allow-classic *.snap
      after_success:
      - BUILDS=()
      - >-
        [ -n "${MULTIPASS_SNAP_CHANNEL}" ]
        && snapcraft login --with ${HOME}/snap-login
        && snapcraft push multipass_*.snap --release ${MULTIPASS_SNAP_CHANNEL}
        && BUILDS+=("\`snap refresh multipass --channel ${MULTIPASS_SNAP_CHANNEL}\`")
      - CURL_OUTPUT=$( timeout 5m curl --fail --upload-file *.snap https://transfer.sh/ )
        || ( echo "Upload failed..."; false )
        && BUILDS+=("[$( basename ${CURL_OUTPUT} )](${CURL_OUTPUT})");
        echo ${CURL_OUTPUT}
      - >-
        [ -n "${MULTIPASS_PUBLISH}" ]
        && python3 -m tools.report_build "${MULTIPASS_REPORT_OPTIONS[@]}" Snap "${BUILDS[@]}"

    - env: BUILD_TYPE=Clang
      before_script: *before_snapcraft
      script:
      - sg lxd -c '/snap/bin/snapcraft build --use-lxd multipass'

    - env: BUILD_TYPE=Debug
      before_script: *before_snapcraft
      script:
      - sg lxd -c '/snap/bin/snapcraft build --use-lxd multipass'
      - sg lxd -c '/snap/bin/lxc start snapcraft-multipass'
      - sg lxd -c
          '/snap/bin/lxc exec snapcraft-multipass --
             env CTEST_OUTPUT_ON_FAILURE=1
                 LD_LIBRARY_PATH=/root/stage/usr/lib/x86_64-linux-gnu/:/root/stage/lib/:/root/parts/multipass/build/lib/
                 /root/parts/multipass/build/bin/multipass_tests'

    - env: BUILD_TYPE=Coverage
      before_script: *before_snapcraft
      script:
      - mkdir "${HOME}/parts"
      - sg lxd -c '/snap/bin/lxc profile device add default build disk source=${HOME}/parts path=/root/parts'
      - sg lxd -c '/snap/bin/snapcraft build --use-lxd multipass'
      - sg lxd -c '/snap/bin/lxc start snapcraft-multipass'
      - sg lxd -c
          '/snap/bin/lxc exec snapcraft-multipass --
             env CTEST_OUTPUT_ON_FAILURE=1
                 LD_LIBRARY_PATH=/root/stage/usr/lib/x86_64-linux-gnu/:/root/stage/lib/
                 cmake --build /root/parts/multipass/build --target covreport'
      after_success:
      - bash <(curl -s https://codecov.io/bash) -Z -s ${HOME/parts}

    - if: |
        repo = canonical/multipass
               AND (type != pull_request
                    OR head_repo = repo)
      env: BUILD_TYPE=macOS
      git:
        submodules: false
      addons: ~
      install: ~
      script:
      - |
        if [ "${TRAVIS_EVENT_TYPE}" == "pull_request" ]; then
          REF="+refs/pull/${TRAVIS_PULL_REQUEST}/merge"
        else
          REF="${TRAVIS_COMMIT}"
        fi
        ARTIFACTS_DIR=$( ssh -q -p ${MAC_PORT} ${MAC_USERHOST} mktemp -d )
        ssh -q -p ${MAC_PORT} ${MAC_USERHOST} multipass-build/build-in-snapshot.sh public "${REF}" "${ARTIFACTS_DIR}" "${MULTIPASS_BUILD_LABEL}"
        scp -P ${MAC_PORT} ${MAC_USERHOST}:${ARTIFACTS_DIR}/*.pkg .
      after_success:
      - CURL_OUTPUT=$( timeout 5m curl --fail --upload-file *.pkg https://transfer.sh/ )
        || ( echo "Upload failed..."; false )
        && [ -n "${MULTIPASS_PUBLISH}" ]
        && python3 -m tools.report_build "${MULTIPASS_REPORT_OPTIONS[@]}" macOS "[$( basename ${CURL_OUTPUT} )](${CURL_OUTPUT})";
        echo ${CURL_OUTPUT}
      after_script: ~
      after_failure: ~
      cache: ~
